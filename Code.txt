HTML:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clima Agora!</title>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700&display=swap" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="../static/css/styles.css">
    <script type="text/javascript" src="../static/js/script.js" defer></script>
</head>

<body>

<img alt="" id="city-image">

<div id="container">
    <div data-tilt data-tilt-glare data-tilt-max-glare="0.3" class="card">
        <div class="form">
            <h3>Confira o clima de uma cidade</h3>
            <div class="form-input-container">
                <form id="city-form">   
                <input type="text" id="city" name="city" required>
                <button type="submit" id="search">
                    <i class="fa-solid fa-magnifying-glass"></i>
                </button>
                </form>
            </div>
            <div id="weather-data" class="hide">
                <h2>
                    <i class="fa-solid fa-location-dot"></i>
                    <span id="city-span"></span>
                    <span id="country-img">
                        <img src="" alt="Bandeira do país" id="country">
                    </span>
                </h2>
                <p id="temperature"><span></span>&deg;C</p>
                <div id="description-container">
                    <p id="description"></p>
                    <img src="" alt="Condições climáticas" id="weather-icon">
                </div>
                <div id="details-container">
                    <p id="humidity">
                        <i class="fa-solid fa-droplet"></i>
                        <span></span>
                    </p>
                    <p id="wind">
                        <i class="fa-solid fa-wind"></i>
                        <span></span>
                    </p>
                </div>
            </div>
            <div id="error-message" class="hide">
                <p>Não foi possível encontrar o clima de uma cidade com este nome.</p>
            </div>
            <div id="loader" class="hide">
                <i class="fa-solid fa-spinner"></i>
            </div>
            <div id="suggestions">
                <button id="viena">Viena</button>
                <button id="copenhague">Copenhague</button>
                <button id="zurique">Zurique</button>
                <button id="vancouver">Vancouver</button>
                <button id="genebra">Genebra</button>
                <button id="frankfurt">Frankfurt</button>
                <button id="osaka">Osaka</button>
                <button id="maceio">Maceió</button>
            </div>  
        </div>
    </div>
</div>

<button id="next-image" class="hidden">Next Image</button>

<div id="background-video">
    <video autoplay muted loop controls>
        <source src="../static/videos/Ocean.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>

</body>
</html>




CSS:

/* Geral */
* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: "Ubuntu", sans-serif;

}

body {
    background: linear-gradient(180deg, #594cee 0%, #8dd0f5 100%);
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-position: center;
    background-size: cover;
    overflow: hidden;
    background: url(back.jpg);
    position: relative;
}

#container {
    padding: 10px;
    border-radius: 1rem;
    max-width: 375px;
    position: absolute;
    z-index: 1;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    backdrop-filter: blur(10px); /* Blur padrão para o contêiner */
    border: 2px solid #fff;
    overflow: hidden; /* Garante que o pseudo-elemento não ultrapasse as bordas do contêiner */
}

.hide {
    display: none !important;
}


/* Form */
.form h3 {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 0.6rem;
    user-select: none;
    color: blue;
}

.form-input-container {
    justify-content: center;
    display: flex;
    align-items: center;
}

.form input {
    padding: 0.8rem;
    border: none;
    flex: 1;
    border-radius: 4px 0 0 4px;
}

.form button {
    padding: 0.8rem;
    min-width: 50px;
    margin-left: 8px;
    background-color: #8dd0f5;
    color: #fff;
    border: none;
    border-radius: 0 4px 4px;
    cursor: pointer;
}

/* Clima */

#weather-data,
#error-message,
#loader,
#suggestions {
    border-top: 1px solid #fff;
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    text-align: center;
    user-select: none;
}

#weather-data h2 {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 0.6rem;
}

#weather-data h2 i {
    font-size: 1rem;
}

#weather-data span {
    margin: 0.6rem;
}

#temperature {
    font-size: 4rem;
}

#country {
    height: 35px;
}

#description-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0.6rem 0;
}

#description {
    font-weight: bold;
    text-transform: capitalize;
}

#details-container {
    display: flex;
    justify-content: center;
    align-items: center;
}

#details-container #humidity {
    border-right: 1px solid #fff;
    margin: 0.6rem;
    padding: 0.6rem;
}

#cidade_nome_css {
    font-family: "Ubuntu", sans-serif;
}

/* Loader */

#loader i {
    animation: rotate 1.5s linear infinite;
}

@keyframes rotate {
    to {
        transform: rotate(360deg);
    }
}

/* Sugestões */
#suggestions {
    display: grid;
    grid-template-columns: 1fr 1fr; /* Duas colunas */
    gap: 0.8rem; /* Espaçamento entre os botões */

    justify-content: center;
    margin-top: 1.5rem;
}

#suggestions button {
    min-width: 150px;
    margin: 0.8rem;
    padding: 0.6rem 0.9rem;
    border-radius: 10rem;
    border: none;
    background-color: #8dd0f5;
    color: #fff;
    cursor: pointer;
    font-weight: bold;
    opacity: 0.8;
    transition: 0.4s;
    user-select: none;
    justify-items: center;
}

#suggestions button:hover {
    opacity: 1;
}

#next-image {
    position: fixed;
    bottom: 20px;
    right: 20px;
    padding: 10px 20px;
    background-color: orange;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    z-index: 10;
}

#next-image.hidden {
    display: none;
}

#city-image {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: -1;
    visibility: hidden; /* Inicialmente escondido */
    opacity: 0.8; /* Ajuste a opacidade conforme necessário */
    border: none; /* Adicionado para remover qualquer borda */
    margin: 0; /* Adicionado para remover qualquer margem */
    padding: 0; /* Adicionado para remover qualquer padding */
    box-sizing: border-box; /* Garante que padding e borda não alterem o tamanho do elemento */

}

#background-video {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;

}

#background-video video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    padding: 0;
    margin: 0;
    border: none;
}




PYTHON:

from flask import Flask, request, render_template, jsonify
import requests

app = Flask(__name__)

def get_weather_data(city_name, api_key):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&units=metric&appid={api_key}&lang=pt_br'
    response = requests.get(url)
    if response.status_code != 200:
        return None, response.status_code
    data = response.json()
    return data, 200

@app.route('/', methods=['GET', 'POST'])
def index():
    return render_template('index.html')

@app.route('/get_weather', methods=['POST'])
def get_weather():
    try:
        city_name = request.json['city']
        api_key = '67d3951e778decfbc3ce684fb106fe29'
        weather_data, status_code = get_weather_data(city_name, api_key)
        if weather_data is None:
            return jsonify({'error': 'Failed to fetch weather data'}), status_code
        return jsonify(weather_data), status_code
    except KeyError:
        return jsonify({'error': 'City name is required'}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
    




JAVASCRIPT:


let currentImageIndex = 0;
let images = [];


document.querySelector("#city").addEventListener("keydown", (event) => {
    if (event.key == "Enter") apiRequest();
});

document.querySelector("#search").addEventListener("click", () => {
    apiRequest();
});

document.querySelector("#next-image").addEventListener("click", () => {
    showNextImage();
});

const apiRequest = () => {
    const city = document.querySelector("#city").value;
    const query = `${city}`;
    const url = `https://api.unsplash.com/search/photos?query=${query}&per_page=30&client_id=SouHY7Uul-OxoMl3LL3c0NkxUtjIrKwf3tsGk1JaiVo`;

    fetch(url)
        .then(response => {
            if (!response.ok) throw Error(response.statusText);
            return response.json();
        })
        .then(data => {
            images = data.results.filter(image => image.width >= 1920 && image.height >= 1080);
            currentImageIndex = 0;
            if (images.length > 0) {
                showNextImage();
                document.querySelector("#next-image").classList.remove("hidden");
            } else {
                alert("No high quality images found.");
                document.querySelector("#next-image").classList.add("hidden");
            }
        })
        .catch(error => console.log(error));
}

const showNextImage = () => {
    if (images.length > 0) {
        const imageUrl = images[currentImageIndex].urls.full + "&w=1920&h=1080";
        document.body.style.backgroundImage = `url(${imageUrl})`;
        document.body.style.backgroundSize = "cover"; // Ajuste da imagem ao tamanho da tela
        document.body.style.backgroundPosition = "center"; // Centralizar imagem
        currentImageIndex = (currentImageIndex + 1) % images.length;
        hideBackgroundVideo(); // Esconde o vídeo de fundo
    }
}

// Função para esconder o vídeo de fundo
const hideBackgroundVideo = () => {
    const videoContainer = document.getElementById('background-video');
    videoContainer.style.display = 'none';
}

// Selecionar elementos do DOM
const cityInput = document.querySelector("#city");
const searchBtn = document.querySelector("#search");

const cityElement = document.querySelector("#city-span");
const tempElement = document.querySelector("#temperature span");
const descElement = document.querySelector("#description");
const weatherIconElement = document.querySelector("#weather-icon");
const countryElement = document.querySelector("#country");
const humidityElement = document.querySelector("#humidity span");
const windElement = document.querySelector("#wind span");
const cityImageElement = document.querySelector("#city-image");

const weatherContainer = document.querySelector("#weather-data");
const errorMessageContainer = document.querySelector("#error-message");
const loader = document.querySelector("#loader");
const suggestionsContainer = document.querySelector("#suggestions");
const suggestionsButtons = document.querySelectorAll("#suggestions button");

// Função para alternar o loader
const toggleLoader = () => {
    loader.classList.toggle("hide");
}

// Função para buscar dados do clima
const getWeatherData = async (city) => {
toggleLoader();
    try {
        const response = await fetch('/get_weather', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ city: city })
        });
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        toggleLoader();
        return data;
    } catch (error) {
        toggleLoader();
        console.error('Error fetching weather data:', error);
        throw error;
    }
};


// Função para mostrar mensagem de erro
const showErrorMessage = () => {
    errorMessageContainer.classList.remove("hide");
};

// Função para esconder informações
const hideInformation = () => {
    errorMessageContainer.classList.add("hide");
    weatherContainer.classList.add("hide");
}

// Função para exibir dados do clima
    const showWeatherData = async (city, imageUrl) => {
    hideInformation();
    try {
        const data = await getWeatherData(city);

        if (data.cod === "404") {
            showErrorMessage();
            return;
        }

        cityElement.innerText = data.name;
        tempElement.innerText = data.main.temp;
        descElement.innerText = data.weather[0].description;
        weatherIconElement.setAttribute("src", `http://openweathermap.org/img/wn/${data.weather[0].icon}.png`);
        humidityElement.innerText = `${data.main.humidity}%`;
        windElement.innerText = `${data.wind.speed}km/h`;
        countryElement.setAttribute("src", `https://flagsapi.com/${data.sys.country}/shiny/64.png`);

        if (imageUrl) {
            cityImageElement.setAttribute("src", imageUrl);
            cityImageElement.style.visibility = "visible"; // Exibe a imagem da cidade
        } else {
            cityImageElement.style.visibility = "hidden"; // Esconde a imagem da cidade
        }



        weatherContainer.classList.remove("hide");

        // Remover sugestões após selecionar uma
        suggestionsContainer.classList.add("hide");

        hideBackgroundVideo(); // Esconde o vídeo de fundo
}catch (error) {
        console.error('Error displaying weather data:', error);
        showErrorMessage();
    }
};

// Mapeamento das sugestões para URLs de imagem
const cityImageUrls = {
    viena: "https://s1.1zoom.me/big0/940/Vienna_Austria_Pond_Palace_Belvedere_Palace_Night_525714_1280x854.jpg",
    copenhague: "https://www.hdwallpapers.in/download/copenhagen_4k_hd-2560x1440.jpg",
    zurique: "https://10wallpaper.com/wallpaper/1920x1080/1412/Zurich_Switzerland_at_dusk-Windows_10_HD_Wallpaper_1920x1080.jpg",
    vancouver: "https://wallpapercave.com/wp/wp4183793.jpg",
    genebra: "https://cdn.pixabay.com/photo/2021/09/04/11/58/geneva-6597614_1280.jpg",
    frankfurt: "https://cdn.pixabay.com/photo/2019/01/06/14/08/frankfurt-3917054_1280.jpg",
    osaka: "https://images.alphacoders.com/562/thumb-1920-562897.jpg",
    maceio: "https://blog.maxmilhas.com.br/wp-content/uploads/2020/03/shutterstock_388880026-scaled.jpg"
};

// Eventos dos botões de sugestão
suggestionsButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
        const city = btn.getAttribute("id");
        const imageUrl = cityImageUrls[city]; // Obter a URL da imagem da cidade clicada
        showWeatherData(city, imageUrl);
        btn.disabled = true; // Desabilitar o botão após ser clicado
    });
});



// Evento de pesquisa por cidade
searchBtn.addEventListener("click", (e) => {
    e.preventDefault();
    const city = cityInput.value;
    const imageUrl = ""; // Se necessário, você pode passar uma URL padrão aqui
    showWeatherData(city, imageUrl);
});

cityInput.addEventListener("keyup", (e) => {
    if (e.code === "Enter") {
        const city = e.target.value;
        const imageUrl = ""; // Se necessário, você pode passar uma URL padrão aqui
        showWeatherData(city, imageUrl);
    }
});





























var VanillaTilt = (function () {
    'use strict';
    
    /**
     * Created by Sergiu Șandor (micku7zu) on 1/27/2017.
     * Original idea: https://github.com/gijsroge/tilt.js
     * MIT License.
     * Version 1.7.2
     */
    
    class VanillaTilt {
      constructor(element, settings = {}) {
        if (!(element instanceof Node)) {
          throw ("Can't initialize VanillaTilt because " + element + " is not a Node.");
        }
    
        this.width = null;
        this.height = null;
        this.clientWidth = null;
        this.clientHeight = null;
        this.left = null;
        this.top = null;
    
        // for Gyroscope sampling
        this.gammazero = null;
        this.betazero = null;
        this.lastgammazero = null;
        this.lastbetazero = null;
    
        this.transitionTimeout = null;
        this.updateCall = null;
        this.event = null;
    
        this.updateBind = this.update.bind(this);
        this.resetBind = this.reset.bind(this);
    
        this.element = element;
        this.settings = this.extendSettings(settings);
    
        this.reverse = this.settings.reverse ? -1 : 1;
        this.glare = VanillaTilt.isSettingTrue(this.settings.glare);
        this.glarePrerender = VanillaTilt.isSettingTrue(this.settings["glare-prerender"]);
        this.fullPageListening = VanillaTilt.isSettingTrue(this.settings["full-page-listening"]);
        this.gyroscope = VanillaTilt.isSettingTrue(this.settings.gyroscope);
        this.gyroscopeSamples = this.settings.gyroscopeSamples;
    
        this.elementListener = this.getElementListener();
    
        if (this.glare) {
          this.prepareGlare();
        }
    
        if (this.fullPageListening) {
          this.updateClientSize();
        }
    
        this.addEventListeners();
        this.reset();
        this.updateInitialPosition();
      }
    
      static isSettingTrue(setting) {
        return setting === "" || setting === true || setting === 1;
      }
    
      /**
       * Method returns element what will be listen mouse events
       * @return {Node}
       */
      getElementListener() {
        if (this.fullPageListening) {
          return window.document;
        }
    
        if (typeof this.settings["mouse-event-element"] === "string") {
          const mouseEventElement = document.querySelector(this.settings["mouse-event-element"]);
    
          if (mouseEventElement) {
            return mouseEventElement;
          }
        }
    
        if (this.settings["mouse-event-element"] instanceof Node) {
          return this.settings["mouse-event-element"];
        }
    
        return this.element;
      }
    
      /**
       * Method set listen methods for this.elementListener
       * @return {Node}
       */
      addEventListeners() {
        this.onMouseEnterBind = this.onMouseEnter.bind(this);
        this.onMouseMoveBind = this.onMouseMove.bind(this);
        this.onMouseLeaveBind = this.onMouseLeave.bind(this);
        this.onWindowResizeBind = this.onWindowResize.bind(this);
        this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this);
    
        this.elementListener.addEventListener("mouseenter", this.onMouseEnterBind);
        this.elementListener.addEventListener("mouseleave", this.onMouseLeaveBind);
        this.elementListener.addEventListener("mousemove", this.onMouseMoveBind);
    
        if (this.glare || this.fullPageListening) {
          window.addEventListener("resize", this.onWindowResizeBind);
        }
    
        if (this.gyroscope) {
          window.addEventListener("deviceorientation", this.onDeviceOrientationBind);
        }
      }
    
      /**
       * Method remove event listeners from current this.elementListener
       */
      removeEventListeners() {
        this.elementListener.removeEventListener("mouseenter", this.onMouseEnterBind);
        this.elementListener.removeEventListener("mouseleave", this.onMouseLeaveBind);
        this.elementListener.removeEventListener("mousemove", this.onMouseMoveBind);
    
        if (this.gyroscope) {
          window.removeEventListener("deviceorientation", this.onDeviceOrientationBind);
        }
    
        if (this.glare || this.fullPageListening) {
          window.removeEventListener("resize", this.onWindowResizeBind);
        }
      }
    
      destroy() {
        clearTimeout(this.transitionTimeout);
        if (this.updateCall !== null) {
          cancelAnimationFrame(this.updateCall);
        }
    
        this.reset();
    
        this.removeEventListeners();
        this.element.vanillaTilt = null;
        delete this.element.vanillaTilt;
    
        this.element = null;
      }
    
      onDeviceOrientation(event) {
        if (event.gamma === null || event.beta === null) {
          return;
        }
    
        this.updateElementPosition();
    
        if (this.gyroscopeSamples > 0) {
          this.lastgammazero = this.gammazero;
          this.lastbetazero = this.betazero;
    
          if (this.gammazero === null) {
            this.gammazero = event.gamma;
            this.betazero = event.beta;
          } else {
            this.gammazero = (event.gamma + this.lastgammazero) / 2;
            this.betazero = (event.beta + this.lastbetazero) / 2;
          }
    
          this.gyroscopeSamples -= 1;
        }
    
        const totalAngleX = this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX;
        const totalAngleY = this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY;
    
        const degreesPerPixelX = totalAngleX / this.width;
        const degreesPerPixelY = totalAngleY / this.height;
    
        const angleX = event.gamma - (this.settings.gyroscopeMinAngleX + this.gammazero);
        const angleY = event.beta - (this.settings.gyroscopeMinAngleY + this.betazero);
    
        const posX = angleX / degreesPerPixelX;
        const posY = angleY / degreesPerPixelY;
    
        if (this.updateCall !== null) {
          cancelAnimationFrame(this.updateCall);
        }
    
        this.event = {
          clientX: posX + this.left,
          clientY: posY + this.top,
        };
    
        this.updateCall = requestAnimationFrame(this.updateBind);
      }
    
      onMouseEnter() {
        this.updateElementPosition();
        this.element.style.willChange = "transform";
        this.setTransition();
      }
    
      onMouseMove(event) {
        if (this.updateCall !== null) {
          cancelAnimationFrame(this.updateCall);
        }
    
        this.event = event;
        this.updateCall = requestAnimationFrame(this.updateBind);
      }
    
      onMouseLeave() {
        this.setTransition();
    
        if (this.settings.reset) {
          requestAnimationFrame(this.resetBind);
        }
      }
    
      reset() {
        this.event = {
          clientX: this.left + this.width / 2,
          clientY: this.top + this.height / 2
        };
    
        if (this.element && this.element.style) {
          this.element.style.transform = `perspective(${this.settings.perspective}px) ` +
            `rotateX(0deg) ` +
            `rotateY(0deg) ` +
            `scale3d(1, 1, 1)`;
        }
    
        this.resetGlare();
      }
    
      resetGlare() {
        if (this.glare) {
          this.glareElement.style.transform = "rotate(180deg) translate(-50%, -50%)";
          this.glareElement.style.opacity = "0";
        }
      }
    
      updateInitialPosition() {
        if (this.settings.startX === 0 && this.settings.startY === 0) {
          return;
        }
    
        this.onMouseEnter();
    
        if (this.fullPageListening) {
          this.event = {
            clientX: (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.clientWidth,
            clientY: (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.clientHeight
          };
        } else {
          this.event = {
            clientX: this.left + ((this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.width),
            clientY: this.top + ((this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.height)
          };
        }
    
    
        let backupScale = this.settings.scale;
        this.settings.scale = 1;
        this.update();
        this.settings.scale = backupScale;
        this.resetGlare();
      }
    
      getValues() {
        let x, y;
    
        if (this.fullPageListening) {
          x = this.event.clientX / this.clientWidth;
          y = this.event.clientY / this.clientHeight;
        } else {
          x = (this.event.clientX - this.left) / this.width;
          y = (this.event.clientY - this.top) / this.height;
        }
    
        x = Math.min(Math.max(x, 0), 1);
        y = Math.min(Math.max(y, 0), 1);
    
        let tiltX = (this.reverse * (this.settings.max - x * this.settings.max * 2)).toFixed(2);
        let tiltY = (this.reverse * (y * this.settings.max * 2 - this.settings.max)).toFixed(2);
        let angle = Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) * (180 / Math.PI);
    
        return {
          tiltX: tiltX,
          tiltY: tiltY,
          percentageX: x * 100,
          percentageY: y * 100,
          angle: angle
        };
      }
    
      updateElementPosition() {
        let rect = this.element.getBoundingClientRect();
    
        this.width = this.element.offsetWidth;
        this.height = this.element.offsetHeight;
        this.left = rect.left;
        this.top = rect.top;
      }
    
      update() {
        let values = this.getValues();
    
        this.element.style.transform = "perspective(" + this.settings.perspective + "px) " +
          "rotateX(" + (this.settings.axis === "x" ? 0 : values.tiltY) + "deg) " +
          "rotateY(" + (this.settings.axis === "y" ? 0 : values.tiltX) + "deg) " +
          "scale3d(" + this.settings.scale + ", " + this.settings.scale + ", " + this.settings.scale + ")";
    
        if (this.glare) {
          this.glareElement.style.transform = `rotate(${values.angle}deg) translate(-50%, -50%)`;
          this.glareElement.style.opacity = `${values.percentageY * this.settings["max-glare"] / 100}`;
        }
    
        this.element.dispatchEvent(new CustomEvent("tiltChange", {
          "detail": values
        }));
    
        this.updateCall = null;
      }
    
      /**
       * Appends the glare element (if glarePrerender equals false)
       * and sets the default style
       */
      prepareGlare() {
        // If option pre-render is enabled we assume all html/css is present for an optimal glare effect.
        if (!this.glarePrerender) {
          // Create glare element
          const jsTiltGlare = document.createElement("div");
          jsTiltGlare.classList.add("js-tilt-glare");
    
          const jsTiltGlareInner = document.createElement("div");
          jsTiltGlareInner.classList.add("js-tilt-glare-inner");
    
          jsTiltGlare.appendChild(jsTiltGlareInner);
          this.element.appendChild(jsTiltGlare);
        }
    
        this.glareElementWrapper = this.element.querySelector(".js-tilt-glare");
        this.glareElement = this.element.querySelector(".js-tilt-glare-inner");
    
        if (this.glarePrerender) {
          return;
        }
    
        Object.assign(this.glareElementWrapper.style, {
          "position": "absolute",
          "top": "0",
          "left": "0",
          "width": "100%",
          "height": "100%",
          "overflow": "hidden",
          "pointer-events": "none"
        });
    
        Object.assign(this.glareElement.style, {
          "position": "absolute",
          "top": "50%",
          "left": "50%",
          "pointer-events": "none",
          "background-image": `linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)`,
          "transform": "rotate(180deg) translate(-50%, -50%)",
          "transform-origin": "0% 0%",
          "opacity": "0",
        });
    
        this.updateGlareSize();
      }
    
      updateGlareSize() {
        if (this.glare) {
          const glareSize = (this.element.offsetWidth > this.element.offsetHeight ? this.element.offsetWidth : this.element.offsetHeight) * 2;
    
          Object.assign(this.glareElement.style, {
            "width": `${glareSize}px`,
            "height": `${glareSize}px`,
          });
        }
      }
    
      updateClientSize() {
        this.clientWidth = window.innerWidth
          || document.documentElement.clientWidth
          || document.body.clientWidth;
    
        this.clientHeight = window.innerHeight
          || document.documentElement.clientHeight
          || document.body.clientHeight;
      }
    
      onWindowResize() {
        this.updateGlareSize();
        this.updateClientSize();
      }
    
      setTransition() {
        clearTimeout(this.transitionTimeout);
        this.element.style.transition = this.settings.speed + "ms " + this.settings.easing;
        if (this.glare) this.glareElement.style.transition = `opacity ${this.settings.speed}ms ${this.settings.easing}`;
    
        this.transitionTimeout = setTimeout(() => {
          this.element.style.transition = "";
          if (this.glare) {
            this.glareElement.style.transition = "";
          }
        }, this.settings.speed);
    
      }
    
      /**
       * Method return patched settings of instance
       * @param {boolean} settings.reverse - reverse the tilt direction
       * @param {number} settings.max - max tilt rotation (degrees)
       * @param {startX} settings.startX - the starting tilt on the X axis, in degrees. Default: 0
       * @param {startY} settings.startY - the starting tilt on the Y axis, in degrees. Default: 0
       * @param {number} settings.perspective - Transform perspective, the lower the more extreme the tilt gets
       * @param {string} settings.easing - Easing on enter/exit
       * @param {number} settings.scale - 2 = 200%, 1.5 = 150%, etc..
       * @param {number} settings.speed - Speed of the enter/exit transition
       * @param {boolean} settings.transition - Set a transition on enter/exit
       * @param {string|null} settings.axis - What axis should be disabled. Can be X or Y
       * @param {boolean} settings.glare - What axis should be disabled. Can be X or Y
       * @param {number} settings.max-glare - the maximum "glare" opacity (1 = 100%, 0.5 = 50%)
       * @param {boolean} settings.glare-prerender - false = VanillaTilt creates the glare elements for you, otherwise
       * @param {boolean} settings.full-page-listening - If true, parallax effect will listen to mouse move events on the whole document, not only the selected element
       * @param {string|object} settings.mouse-event-element - String selector or link to HTML-element what will be listen mouse events
       * @param {boolean} settings.reset - false = If the tilt effect has to be reset on exit
       * @param {gyroscope} settings.gyroscope - Enable tilting by deviceorientation events
       * @param {gyroscopeSensitivity} settings.gyroscopeSensitivity - Between 0 and 1 - The angle at which max tilt position is reached. 1 = 90deg, 0.5 = 45deg, etc..
       * @param {gyroscopeSamples} settings.gyroscopeSamples - How many gyroscope moves to decide the starting position.
       */
      extendSettings(settings) {
        let defaultSettings = {
          reverse: false,
          max: 15,
          startX: 0,
          startY: 0,
          perspective: 1000,
          easing: "cubic-bezier(.03,.98,.52,.99)",
          scale: 1,
          speed: 300,
          transition: true,
          axis: null,
          glare: false,
          "max-glare": 1,
          "glare-prerender": false,
          "full-page-listening": false,
          "mouse-event-element": null,
          reset: true,
          gyroscope: true,
          gyroscopeMinAngleX: -45,
          gyroscopeMaxAngleX: 45,
          gyroscopeMinAngleY: -45,
          gyroscopeMaxAngleY: 45,
          gyroscopeSamples: 10
        };
    
        let newSettings = {};
        for (var property in defaultSettings) {
          if (property in settings) {
            newSettings[property] = settings[property];
          } else if (this.element.hasAttribute("data-tilt-" + property)) {
            let attribute = this.element.getAttribute("data-tilt-" + property);
            try {
              newSettings[property] = JSON.parse(attribute);
            } catch (e) {
              newSettings[property] = attribute;
            }
    
          } else {
            newSettings[property] = defaultSettings[property];
          }
        }
    
        return newSettings;
      }
    
      static init(elements, settings) {
        if (elements instanceof Node) {
          elements = [elements];
        }
    
        if (elements instanceof NodeList) {
          elements = [].slice.call(elements);
        }
    
        if (!(elements instanceof Array)) {
          return;
        }
    
        elements.forEach((element) => {
          if (!("vanillaTilt" in element)) {
            element.vanillaTilt = new VanillaTilt(element, settings);
          }
        });
      }
    }
    
    if (typeof document !== "undefined") {
      /* expose the class to window */
      window.VanillaTilt = VanillaTilt;
    
      /**
       * Auto load
       */
      VanillaTilt.init(document.querySelectorAll("[data-tilt]"));
    }
    
    return VanillaTilt;
    
    }());